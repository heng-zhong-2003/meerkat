  2024-07-30T17:03:07.855330Z  INFO  srvmanager_proc > create_worker called
    at src/backend/srvmanager_proc.rs:79
    in create_worker with name: "c", workertype: Def, sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, subscribers: {}, typenv: {}, var_or_def_env: {}, dependgraph: {}

  2024-07-30T17:03:07.855422Z  INFO  srvmanager_proc > create_worker called
    at src/backend/srvmanager_proc.rs:79
    in create_worker with name: "a", workertype: Def, sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, subscribers: {"c"}, typenv: {"c": None}, var_or_def_env: {"c": Def}, dependgraph: {"c": {}}

  2024-07-30T17:03:07.855491Z  INFO  srvmanager_proc > create_worker called
    at src/backend/srvmanager_proc.rs:79
    in create_worker with name: "b", workertype: Def, sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 4, rx_fields: "..." } } }, subscribers: {"c"}, typenv: {"c": None, "a": None}, var_or_def_env: {"c": Def, "a": Def}, dependgraph: {"c": {}, "a": {"c"}}

  2024-07-30T17:03:07.855550Z  INFO  srvmanager_proc > create_worker called
    at src/backend/srvmanager_proc.rs:79
    in create_worker with name: "x", workertype: Var, sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 5, rx_fields: "..." } } }, subscribers: {"b", "a"}, typenv: {"b": None, "c": None, "a": None}, var_or_def_env: {"b": Def, "c": Def, "a": Def}, dependgraph: {"c": {}, "a": {"c"}, "b": {"c"}}

  2024-07-30T17:03:07.855635Z  INFO  srvmanager_proc > init_def_worker called, name: c, var_init_val: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add }, worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}
    at src/backend/srvmanager_proc.rs:122
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "c", def_init_expr: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add }

  2024-07-30T17:03:07.855676Z  INFO  srvmanager_proc > init_def_worker > send InitDef message, send_message: InitDef { def_name: "c", def_expr: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add } }
    at src/backend/srvmanager_proc.rs:133
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "c", def_init_expr: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add }

  2024-07-30T17:03:07.855773Z  INFO  worker > handle_message callede, replica: {}, curr_val: None, def_expr: None, name: c, msg: InitDef { def_name: "c", def_expr: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add } }
    at src/backend/worker.rs:52
    in handle_message with sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 5, rx_fields: "..." } } }, senders_to_succs: [], replica: {}, curr_val: None, def_expr: None, name: "c", msg: InitDef { def_name: "c", def_expr: BopExpr { opd1: IdExpr { ident: "a" }, opd2: IdExpr { ident: "b" }, bop: Add } }

  2024-07-30T17:03:07.855735Z  INFO  srvmanager_proc > init_def_worker called, name: a, var_init_val: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add }, worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}
    at src/backend/srvmanager_proc.rs:122
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "a", def_init_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add }

  2024-07-30T17:03:07.855819Z  INFO  srvmanager_proc > init_def_worker > send InitDef message, send_message: InitDef { def_name: "a", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add } }
    at src/backend/srvmanager_proc.rs:133
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "a", def_init_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add }

  2024-07-30T17:03:07.855881Z  INFO  srvmanager_proc > init_def_worker called, name: b, var_init_val: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul }, worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}
    at src/backend/srvmanager_proc.rs:122
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1023 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "b", def_init_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul }

  2024-07-30T17:03:07.855911Z  INFO  srvmanager_proc > init_def_worker > send InitDef message, send_message: InitDef { def_name: "b", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul } }
    at src/backend/srvmanager_proc.rs:133
    in init_def_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1023 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "b", def_init_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul }

  2024-07-30T17:03:07.855959Z  INFO  worker > handle_message callede, replica: {}, curr_val: None, def_expr: None, name: a, msg: InitDef { def_name: "a", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add } }
    at src/backend/worker.rs:52
    in handle_message with sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 5, rx_fields: "..." } } }, senders_to_succs: [Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }], replica: {}, curr_val: None, def_expr: None, name: "a", msg: InitDef { def_name: "a", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 1 }, bop: Add } }

  2024-07-30T17:03:07.855977Z  INFO  srvmanager_proc > init_var_worker called, name: x, var_init_val: IntConst { val: 1 }, worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}
    at src/backend/srvmanager_proc.rs:101
    in init_var_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1023 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "x", var_init_val: IntConst { val: 1 }

  2024-07-30T17:03:07.855996Z  INFO  srvmanager_proc > init_def_worker > send InitVar message, send_message: InitVar { var_name: "x", var_expr: IntConst { val: 1 } }
    at src/backend/srvmanager_proc.rs:112
    in init_var_worker with worker_inboxes: {"x": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00da00, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 1, rx_fields: "..." } } }, "c": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, "b": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1023 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, "a": Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }}, name: "x", var_init_val: IntConst { val: 1 }

  2024-07-30T17:03:07.856063Z  INFO  worker > handle_message callede, replica: {}, curr_val: None, def_expr: None, name: b, msg: InitDef { def_name: "b", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul } }
    at src/backend/worker.rs:52
    in handle_message with sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 5, rx_fields: "..." } } }, senders_to_succs: [Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00a400, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }], replica: {}, curr_val: None, def_expr: None, name: "b", msg: InitDef { def_name: "b", def_expr: BopExpr { opd1: IdExpr { ident: "x" }, opd2: IntConst { val: 2 }, bop: Mul } }

  2024-07-30T17:03:07.856087Z  INFO  worker > handle_message callede, replica: {}, curr_val: None, def_expr: None, name: x, msg: InitVar { var_name: "x", var_expr: IntConst { val: 1 } }
    at src/backend/worker.rs:52
    in handle_message with sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 3, rx_fields: "..." } } }, senders_to_succs: [Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }], replica: {}, curr_val: None, def_expr: None, name: "x", msg: InitVar { var_name: "x", var_expr: IntConst { val: 1 } }

  2024-07-30T17:03:08.858502Z  INFO  worker > handle_message callede, replica: {}, curr_val: Some(Int(1)), def_expr: None, name: x, msg: RetrieveVal
    at src/backend/worker.rs:52
    in handle_message with sender_to_manager: Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f008600, tail_position: 0 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, senders_to_succs: [Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00c800, tail_position: 2 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }, Sender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x14f00b600, tail_position: 1 }, semaphore: Semaphore { semaphore: Semaphore { permits: 1024 }, bound: 1024 }, rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } }], replica: {}, curr_val: Some(Int(1)), def_expr: None, name: "x", msg: RetrieveVal

